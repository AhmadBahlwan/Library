schema {
    query: Query
}

type Query {
    allBooks(pagination: PaginationFilter): [Book]
    book(id: ID): Book
    booksWithFilter(filter: BookFilter, pagination: PaginationFilter): [Book]
    allAuthors(pagination: PaginationFilter): [Author]
    author(id: ID): Author
    authorsWithFilter(filter: AuthorFilter, pagination: PaginationFilter): [Author]
}

type Book {
    id: ID!
    title: String
    description: String
    publishDate: String
    authors: [Author]
}

type Author {
    id: ID!
    name: String
    birthDate: String
    books: [Book]
}

input BookFilter {
    title: FilterField
    description: FilterField
    publishDate: FilterField

}

input AuthorFilter {
    name: FilterField
    birthDate: FilterField
}

input FilterField {
    operator: String!
    value: String!
}

input PaginationFilter {
    page: Int
    size: Int
}

type Mutation {
    createBook(id: String!, title: String!, description: String, publish_date: String, authors:[ID]): Book!
    createAuthor(id: String, name: String!, birth_date: String, books:[ID]): Author!
}